<Page x:Class="NW_Table_Viewer.HomePage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:NW_Table_Viewer"
      mc:Ignorable="d" 
      MinHeight="845"
      FontFamily="Tw Cen MT"
      MinWidth="1327"
      Title="HomePage">
    <Page.Resources>

<!-- This is DataGrid Style -->
        <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="True"/>
                            <Polygon x:Name="Arrow" Fill="Black" HorizontalAlignment="Right" Margin="8,8,3,3" Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Fill" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


<!-- Table Combo Box -->
        <ControlTemplate x:Key="TableToggleButton">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="30"/>
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="Border"
                    Grid.ColumnSpan="2"
                    Background="{DynamicResource comboBackground}"
                    >
                    <Border.Effect>
                        <DropShadowEffect ShadowDepth="2" BlurRadius="4" Opacity="0.25" Direction="270" />
                    </Border.Effect>
                </Border>
                <Border
                    Grid.Column="0"
                    CornerRadius="10 0 0 10"
                    Background="Transparent"
                    />
                <Path
                    x:Name="Arrow"
                    Grid.Column="1"
                    Fill="{DynamicResource TextColour}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                    />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectionOver}" />
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectionOver}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectionOver}" />
                    <Setter Property="Foreground" Value="{DynamicResource comboForeground}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
            <Border x:Name="ContentPart" Focusable="False" Background="Transparent"/>
        </ControlTemplate>

        <ControlTemplate x:Key="ComboBoxToggleButtonCol">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Border
              Background="Transparent"/>
                <Image Source="{DynamicResource columnDensity}" />

            </Grid>

        </ControlTemplate>

        <!-- Combobox for columns visibility. -->
        <ControlTemplate x:Key="ComboBoxTemplateColumns" TargetType="{x:Type ComboBox}">
            <Grid>
                <ToggleButton
              Name="ToggleButton"
              Template="{StaticResource ComboBoxToggleButtonCol}"
              Focusable="false"
              IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
              ClickMode="Press">
                    
                </ToggleButton>
                <Popup 
          Name="Popup"
          Placement="Bottom"
          IsOpen="{TemplateBinding IsDropDownOpen}"
          AllowsTransparency="True" 
          Focusable="False"
          PopupAnimation="Slide">

                    <Grid Name="DropDown"
            SnapsToDevicePixels="True"                
            MinWidth="{TemplateBinding ActualWidth}"
            MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border 
              x:Name="DropDownBorder"
              Background="{DynamicResource comboBackground}"
       >
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="2" BlurRadius="4" Opacity="0.25" Direction="270" />
                            </Border.Effect>
                        </Border>
                        <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                    </Grid>
                </Popup>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasItems" Value="false">
                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="#F2F4EC"/>
                </Trigger>
                <Trigger Property="IsGrouping" Value="true">
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </Trigger>
                <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                    <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>




<!-- Combobox template table -->
        <ControlTemplate x:Key="ComboBoxTemplateTable" TargetType="{x:Type ComboBox}">
            <Grid>
                <ToggleButton Name="ToggleButton" Template="{StaticResource TableToggleButton}"
                        Grid.Column="2"
                        Focusable="false"
                        IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                        ClickMode="Press"
                 />
                <ContentPresenter Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}"
                 ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                 ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                  VerticalAlignment="Center"
                                  Margin="10"
                                  HorizontalAlignment="Left"/>
                <TextBox x:Name="ContentPart"
                         Template="{StaticResource ComboBoxTextBox}"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         Focusable="False"
                         Visibility="Hidden"
                         Foreground="{DynamicResource comboForeground}"
                         IsReadOnly="True"
                         />
                <Popup 
                Name="Popup"
                Placement="Bottom"
                IsOpen="{TemplateBinding IsDropDownOpen}"
                Focusable="False"
                PopupAnimation="Slide">

                    <Grid Name="DropDown"
                  SnapsToDevicePixels="True"                
                  MinWidth="{TemplateBinding ActualWidth}"
                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border 
                    x:Name="DropDownBorder"
                    Background="{DynamicResource comboBackground}"
             >

                        </Border>
                        <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                    </Grid>
                </Popup>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasItems" Value="false">
                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource ResourceKey=comboForeground}"/>
                </Trigger>
                <Trigger Property="IsGrouping" Value="true">
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="ComboBoxToggleButton">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <Border
            x:Name="Border"
             Grid.ColumnSpan="2"
             Background="{DynamicResource comboBackground}">
                 
                </Border>
                <Border
             x:Name="Border2"
             Grid.Column="0"
             Background="{DynamicResource comboBackground}"
             />
                <Path
             x:Name="Arrow"
             Grid.Column="1"
             Fill="{DynamicResource TextColour}"
             HorizontalAlignment="Center"
             VerticalAlignment="Center"
             Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
             />
                <Label
             Grid.Column="0"
             Content="Filters"
             Foreground="{DynamicResource TextColour}"
             HorizontalAlignment="Center"
             VerticalAlignment="Center"
             FontSize="16"
             Margin="20 0 0 0"
             />
                <Image Grid.Column="0" Source="{DynamicResource columnFilter}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="6,0,0,0" Height="19" Width="19"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectionOver}" />
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectionOver}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectionOver}" />
                    <Setter Property="Foreground" Value="{DynamicResource TextColour}"/>
                    <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource TextColour}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="True">
                    <Setter Property="Foreground" Value="{DynamicResource TextColour}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>


<!-- Combobox template filters -->

        <ControlTemplate x:Key="ComboBoxTemplateFilters" TargetType="{x:Type ComboBox}">
            <Grid>
                <ToggleButton
          Name="ToggleButton"
          Template="{StaticResource ComboBoxToggleButton}"
          Grid.Column="2"
          Focusable="false"
          IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
          ClickMode="Press">
                    >
                </ToggleButton>
                <Popup 
                     Name="Popup"
                     Placement="Bottom"
                     IsOpen="{TemplateBinding IsDropDownOpen}"
                     Focusable="False"
                
                     PopupAnimation="Slide">

                    <Grid Name="DropDown"
                       SnapsToDevicePixels="True"                
                       MinWidth="{TemplateBinding ActualWidth}"
                       MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border 
                         x:Name="DropDownBorder"
                         Background="{DynamicResource comboBackground}"
                  >
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="2" BlurRadius="4" Opacity="0.25" Direction="270" />
                            </Border.Effect>
                        </Border>
                        <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                    </Grid>
                </Popup>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasItems" Value="false">
                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="#F2F4EC"/>
                </Trigger>
                <Trigger Property="IsGrouping" Value="true">
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </Trigger>
                <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                    <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0 0 10 10"/>
                    <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Scroll bar style -->

        <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border 
    Name="Border"
    Margin="1" 
    CornerRadius="0" 
    Background="{DynamicResource ScrollBarBG}"
    BorderBrush="{DynamicResource ScrollBarBG}"
    BorderThickness="1">
                            <Path 
      HorizontalAlignment="Center"
      VerticalAlignment="Center"
      Data="{Binding Path=Content,RelativeSource={RelativeSource TemplatedParent}}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="blue" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="Gray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border 
    CornerRadius="1"
    Background="{DynamicResource ScrollBarButton}"
    
    />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid >
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="18"/>
                    <RowDefinition Height="0.00001*"/>
                    <RowDefinition MaxHeight="18"/>
                </Grid.RowDefinitions>
                <Border
Grid.RowSpan="3"
CornerRadius="2" 
Background="{DynamicResource ScrollBarBG}" />
                <RepeatButton 
Grid.Row="0"                           
Style="{StaticResource ScrollBarLineButton}"
Height="18"
Command="ScrollBar.LineUpCommand"
Content="M 0 4 L 8 4 L 4 0 Z" />
                <Track 
Name="PART_Track"
Grid.Row="1"
IsDirectionReversed="true">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton 
    Style="{StaticResource ScrollBarPageButton}"
    Command="ScrollBar.PageUpCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb 
    Style="{StaticResource ScrollBarThumb}" 
    Margin="1,0,1,0"  
    Background="{DynamicResource ScrollBarBG}"
    BorderBrush="{DynamicResource ScrollBarButton}" />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton 
    Style="{StaticResource ScrollBarPageButton}"
    Command="ScrollBar.PageDownCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton 
Grid.Row="3" 
Style="{StaticResource ScrollBarLineButton}"
Height="18"
Command="ScrollBar.LineDownCommand"
Content="M 0 0 L 4 4 L 8 0 Z"/>
            </Grid>
        </ControlTemplate>

        <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MaxWidth="18"/>
                    <ColumnDefinition Width="0.00001*"/>
                    <ColumnDefinition MaxWidth="18"/>
                </Grid.ColumnDefinitions>
                <Border
Grid.ColumnSpan="3"
CornerRadius="2" 
Background="#F0F0F0" />
                <RepeatButton 
Grid.Column="0"                           
Style="{StaticResource ScrollBarLineButton}"
Width="18"
Command="ScrollBar.LineLeftCommand"
Content="M 4 0 L 4 8 L 0 4 Z" />
                <Track 
Name="PART_Track"
Grid.Column="1"
IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton 
    Style="{StaticResource ScrollBarPageButton}"
    Command="ScrollBar.PageLeftCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb 
    Style="{StaticResource ScrollBarThumb}" 
    Margin="0,1,0,1"  
    Background="{DynamicResource ScrollBarBG}"
    BorderBrush="{DynamicResource ScrollBarBG}" />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton 
    Style="{StaticResource ScrollBarPageButton}"
    Command="ScrollBar.PageRightCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton 
Grid.Column="3" 
Style="{StaticResource ScrollBarLineButton}"
Width="18"
Command="ScrollBar.LineRightCommand"
Content="M 0 0 L 4 4 L 0 8 Z"/>
            </Grid>
        </ControlTemplate>

        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="18" />
                    <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                </Trigger>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Width" Value="18"/>
                    <Setter Property="Height" Value="Auto" />
                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                </Trigger>
            </Style.Triggers>
        </Style>

<!-- Datagrid template style -->
        <ControlTemplate x:Key="DataGridTemplate1" TargetType="{x:Type DataGrid}">

            <Border Background="{DynamicResource TableBG}" BorderBrush="{x:Null}" BorderThickness="0" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                    <ScrollViewer.Template>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                <Grid Grid.Column="1" Grid.Row="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                                </Grid>
                            </Grid>
                        </ControlTemplate>
                    </ScrollViewer.Template>
                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </ScrollViewer>
            </Border>
        </ControlTemplate>
        <Style x:Name="DataGridStyle" TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="Background" Value="{DynamicResource TableHeaderBG}"/>
            <Setter Property="Foreground" Value="{DynamicResource TableHeaderFG}"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>

                    <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                        <Border Background="{DynamicResource TableHeaderBG}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter HorizontalAlignment="Left" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="5,0,0,0">
                                    <Image Height="14" Stretch="Uniform" Source="{DynamicResource arrow1}"/>
                                </StackPanel>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="SortDirection" Value="Ascending"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>




    </Page.Resources>

    <Grid Background="{DynamicResource BackgroundColour}">

        <Image Source="/Resources/logo.png" HorizontalAlignment="Left" VerticalAlignment="Top" Height="74" Width="126" Margin="44,22,0,0" />

<!-- Logout -->
        <Button x:Name="LogoutButton" FontSize="18" BorderBrush="{x:Null}" BorderThickness="0" Background="{DynamicResource buttonBackground}" Foreground="{DynamicResource buttonForeground}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="1127,10,0,0" Click="LogoutButton_Click" Height="27" Width="78"  >LOGOUT</Button>
        <!-- Search bar -->
        <TextBox x:Name="SearchDataGrid" FontSize="20" VerticalContentAlignment="Center" HorizontalAlignment="Left" Margin="486,74,0,0" TextWrapping="Wrap" Text="Search..." BorderBrush="{x:Null}" BorderThickness="0" Background="{DynamicResource SearchBarBG}" Foreground="{DynamicResource SearchBarFG}" VerticalAlignment="Top" Width="626" Height="35" TextChanged="SearchDataGrid_TextChanged" />
        <!-- Combo box for templates -->
        <ComboBox Template="{DynamicResource ComboBoxTemplateColumns}" Foreground="{DynamicResource ButtonMainFG }"  x:Name="ColumnSizeComboBox" HorizontalAlignment="Left" Margin="1236,74,0,0" VerticalAlignment="Top" Width="50" Initialized="ColumnSizeComboBox_Initialized" SelectionChanged="ColumnSizeComboBox_SelectionChanged" Height="32"/>

<!-- Main data table this is where the data is displayed -->
        <DataGrid 
            x:Name="MainTable" 
            Template="{DynamicResource DataGridTemplate1}" 
            GridLinesVisibility="None"   
            CanUserReorderColumns="False"
            RowBackground="{DynamicResource RowColour}"
            AlternatingRowBackground="{DynamicResource RowAColour}"
            Foreground="{DynamicResource TableText}"
            HorizontalContentAlignment="Stretch"
            IsReadOnly="True"
            FontSize="15"
            HeadersVisibility="Column"
            CanUserAddRows="False" 
            AutoGenerateColumns="False" 
            Margin="43,120,41,271" 
            ColumnWidth="*" 
            SelectionChanged="MainTable_SelectionChanged"/>

<!-- Check box section -->
        <Label HorizontalAlignment="Left" FontSize="30" VerticalAlignment="Top" Foreground="{DynamicResource TextColour}" Margin="44,575,0,0">Selected Rows:</Label>
        <Label x:Name="CountLabel" FontSize="30" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="{DynamicResource TextColour}" Margin="244,576,0,0">0</Label>
        <CheckBox FontSize="14" x:Name="PdfCheck" Content=".PDF" HorizontalAlignment="Left" Margin="1061,590,0,0" VerticalAlignment="Top" Background="{DynamicResource CheckBoxBG}" Foreground="{DynamicResource ButtonMainFG}" BorderBrush="{x:Null}" BorderThickness="0"/>
        <CheckBox FontSize="14" x:Name="CSVCheck" Content=".CSV" HorizontalAlignment="Left" Margin="1110,590,0,0" VerticalAlignment="Top" Background="{DynamicResource CheckBoxBG}" Foreground="{DynamicResource ButtonMainFG}" BorderBrush="{x:Null}" BorderThickness="0"/>
        <CheckBox FontSize="14" x:Name="SelectCheck" Content="Select Whole Table" HorizontalAlignment="Left" Margin="1158,590,0,0" VerticalAlignment="Top" Checked="SelectCheck_Checked" Foreground="{DynamicResource ButtonMainFG}" Unchecked="SelectCheck_Unchecked" Background="{DynamicResource CheckBoxBG}" BorderBrush="{x:Null}" BorderThickness="0"/>

<!-- Data grid selection -->

        <DataGrid 
            Template="{DynamicResource DataGridTemplate1}" 
            x:Name="SelectedTable" 
            GridLinesVisibility="None"  
            CanUserReorderColumns="False"
            FontSize="15"
            RowBackground="{DynamicResource RowColour}"
            AlternatingRowBackground="{DynamicResource RowAColour}"
            Foreground="{DynamicResource TableText}"
            HorizontalContentAlignment="Stretch"
            IsReadOnly="True"
            HeadersVisibility="Column"
            CanUserAddRows="False" 
            AutoGenerateColumns="False" 
            Margin="43,618,41,39" 
            ColumnWidth="*"/>
        <Border HorizontalAlignment="Left" Height="28" Margin="956,583,0,0" VerticalAlignment="Top" Width="84">
            <Border.Effect>
                <DropShadowEffect ShadowDepth="2" BlurRadius="3" Opacity="0.2" Direction="270"/>
            </Border.Effect>
            <Button FontSize="16" Style="{DynamicResource ButtonStyle1}" BorderBrush="{x:Null}" Background="{DynamicResource ButtonMainBG}" Foreground="{DynamicResource ButtonMainFG}" BorderThickness="0" x:Name="ExportButton" Content="Export" HorizontalAlignment="Center" VerticalAlignment="Center" Click="ExportButton_Click" Height="28" Width="84"/>
        </Border>
        <Border HorizontalAlignment="Left" Height="34" Margin="327,75,0,0" VerticalAlignment="Top" Width="120">
            <Border.Effect>
                <DropShadowEffect ShadowDepth="2" BlurRadius="3" Opacity="0.2" Direction="270"/>
            </Border.Effect>
            <ComboBox Template="{DynamicResource ComboBoxTemplateTable}" FontSize="16" Foreground="{DynamicResource TextColour}" x:Name="TableComboBox" HorizontalAlignment="Center" VerticalAlignment="Center" Width="120" SelectionChanged="TableComboBox_SelectionChanged" Initialized="TableComboBox_Initialized" Height="35" />
        </Border>


        <Border HorizontalAlignment="Left" Height="32" Margin="1127,74,0,0" VerticalAlignment="Top" Width="101">

            <Border.Effect>
                <DropShadowEffect ShadowDepth="2" BlurRadius="3" Opacity="0.2" Direction="270"/>
            </Border.Effect>

            <ComboBox Template="{DynamicResource ComboBoxTemplateFilters}" Background="{DynamicResource comboBackground}"  x:Name="ColumnsVisibilityComboBox" Foreground="{DynamicResource TextColour}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="100" Height="32">
            </ComboBox>
        </Border>

    </Grid>
</Page>
